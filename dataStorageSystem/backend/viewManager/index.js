require('dotenv').config();
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs');
const {v4: uuidv4} = require("uuid");
const path = require('path');

const { startJavascriptExecutionService } = require('./src/servicesUtils/jsExecutionServiceUtil');
const { gracefulShutdown } = require('./src/shutdown/shutdownUtils');

const registerTemplatesRoutes = require('./src/routes/templatesRelatedRoutes');
const registerViewInstancesRoutes = require('./src/routes/viewInstancesRoutes');

const app = express();
app.use(express.json());

app.use(cors({})); // to allow cross origin requests

const db = require('./src/database/Database')
db.connect();

// Exit if PROJECT_ROOT environment variable is not set - we cannot continue
if (!process.env.PROJECT_ROOT || !process.env.UPLOADS_TEMPORARY_DIRECTORY) {
    console.error("Error: PROJECT_ROOT or UPLOADS_TEMPORARY_DIRECTORY environment variable is not set.");
    process.exit(1);
}

const UPLOADS_TEMPORARY_DIRECTORY = path.join(process.env.PROJECT_ROOT, process.env.UPLOADS_TEMPORARY_DIRECTORY);
const MAXIMUM_UPLOAD_LIMIT_PER_FILE = 1024 * 1024 * 5; // 5 MB
const MAXIMUM_NUMBER_OF_UPLOADED_FILES_PER_REQUEST = 10;

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        if (!fs.existsSync(UPLOADS_TEMPORARY_DIRECTORY)) {
            fs.mkdirSync(UPLOADS_TEMPORARY_DIRECTORY, { recursive: true });
        }
        cb(null, UPLOADS_TEMPORARY_DIRECTORY)
    },
    filename: function (req, file, cb) {
        cb(null, uuidv4() + '-' + Date.now() + '-' + file.originalname)
    }
});

const uploadMulterMiddleware = multer({ 
    storage: storage,
    fileSize: MAXIMUM_UPLOAD_LIMIT_PER_FILE,
    files: MAXIMUM_NUMBER_OF_UPLOADED_FILES_PER_REQUEST
});

// startJavascriptExecutionService();

app.use('/viewTemplates', registerTemplatesRoutes(uploadMulterMiddleware))
app.use('/viewInstances', registerViewInstancesRoutes());

const server = app.listen(process.env.VIEW_MANAGER_PORT, () => {
    console.log(`ViewManager listening at http://localhost:${process.env.VIEW_MANAGER_PORT}`);
});

server.on('error', (error) => {
    console.error('Error starting the server:', error);
});

process.on('SIGINT', gracefulShutdown); // generated by the user; pressing Ctrl+C
process.on('SIGTERM', gracefulShutdown); // sent programmatically or by system administrators. Often used by process managers, like PM2 or systemd, to stop a process.
// Emitted when the Node.js process is about to exit as a result of either:
// The process.exit() method being called explicitly.
// The Node.js event loop not having any additional work to perform.
process.on('exit', gracefulShutdown);
