openapi: 3.0.0
servers: []
info:
  version: "1.0.1"
  title: Data Storage System
  description: This is a documentation for Data Storage System api endpoints.

components:
# ------------ SCHEMAS ----------------------------------------------------------------------------
  schemas:
    App:
      description: ""
      properties:
        associatedAppId:
          type: string
          description: "App id which has been associated with this token during initialisation of the token. App id is 0 in case of dataStorageSystem"
        associatedAppName:
          type: string
          description: "App name which has been associated with this token during initialisation of the token"
        associatedAppDescription:
          type: string
          description: "App description which has been associated with this token during initialisation of the token"


    Token:
      description: "Token is associated with exactly one app (dataStorageSystem has one self granted token as well - 0). Whenever is app specified here, it can be dataStorageSystem as well."
      properties:
        tokenId:
          type: string
          description: "Id of the token (either generated for new app or fixed '0' for dataStorageSystem)"
        app:
          $ref: '#/components/schemas/App'
        createdTimestamp:
          type: integer
          description: "Timestamp for when this token has been created"


    EventTypeInformation:
      description: "Information about a specific event. (Event is one unit of data)"
      properties:
        eventTypeId:
          type: string
        eventTypeName:
          type: string
        eventOwnerTokenId:
          type: string
          description: "Id of the app which created this event name"
        eventOwnerTokenName:
          type: string
          description: "Name of the app which created this event name"
        metadataSchema:
          type: object
    

    Event:
      type: object
      properties:
        eventId:
          type: string
        eventTypeId:
          type: string
        sourceTokenId:
          type: string
          description: >-
            TokenId of the source (who generated this event). 
            This can be different from eventOwnerTokenId which is the id associated with the app which created this event.
        modifiedTokenId:
          type: string
          description: >-
            TokenId of the app which last modified this event.
          default: null
        createdTimestamp:
          type: string
        modifiedTimestamp:
          type: string
          default: null
        metadata:
          type: object
        data:
          type: object
          description: Any type of text data.
    
    Event_Pushing_Version:
      description: This is Event type but modified to be used in post requests (remaining fields in Event are filled in by dataStorageSystem)
      type: object
      properties:
        eventTypeId:
          type: string
        metadata:
          type: object
        data:
          type: object
          description: Any type of text data.

    Event_Updating_Version:
      description: This is Event type but modified to be used in put requests (remaining fields in Event are filled in by dataStorageSystem)
      type: object
      properties:
        metadata:
          type: object
        data:
          type: object
          description: Any type of text data.


    PermissionOperation:
      type: string
      enum: ['READ', 'WRITE', 'UPDATE', 'DELETE']
      description: "Permission operation flag"


    Permission:
      properties:
        eventTypeInformation:
          $ref: '#/components/schemas/EventTypeInformation'
        permissionGranted:
          type: boolean
          default: true
        waitingForUserApproval:
          type: boolean
          default: false
        allowedOperations:
          type: array
          items: 
            $ref: '#/components/schemas/PermissionOperation' 
          description: "Functions as flags"
        issuer:
          $ref: '#/components/schemas/Token'
          description: "Issuer is app/dataStorageSystem which issued this permission (for instance dataStorage - it has its own fixed token)"
        isTemporaryAccess:
          type: boolean
          description: "Whether this permission is temporary only ( if so, expirationTimestamp is set )"
        expirationTimestamp:
          type: integer
          description: "Timestamp when this permission expires"
  
    Error:
      description: Error response for body
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    User:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    
# ------------ PARAMETERS -------------------------------------------------------------------------

  parameters:
    tokenId:
      name: tokenId
      in: path
      required: true
      description: The id of the token
      schema:
          type: string
    
    permissionRequestId:
      name: "permissionRequestId"
      in: path
      required: true
      description: The id of the permission request waiting for user approval
      schema:
        type: string
      
    eventTypeId:
      name: "eventTypeId"
      in: "path"
      required: true
      description: The id of the event type
      schema:
        type: string
    
    eventId:
      name: "eventId"
      in: "path"
      required: true
      description: The id of the specific saved event
      schema:
        type: string


# ------------ PATHS ------------------------------------------------------------------------------

# ------------ PATHS - USER INITIATED -----------------------------------------

paths:
  /tokens/create:
    post:
      summary: Creates new token for new app prepared for Data Storage System
      description: >-
        This is token is not associated with any app. It's the app that needs to get that token, associate itself with that token and request permissions for it
      tags: ["user initiated"]
      responses:
        200:
          description: 'Successfully created new token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId:
                    type: string


  /tokens/{tokenId}/:
    parameters:
      - $ref: '#/components/parameters/tokenId'
    delete:
      summary: Allows to delete token along with all generated data by it
      description: >-
        Used when the user wants to remove the app from the system.
        It is important to say, that all data associated with this token will be deleted.
      tags: ["user initiated"]
      responses:
        200:
          description: "Operation was successful"
        400:
          description: tokenId does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong internally
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens:
    get:
      summary: Gets all registered tokens
      description: >-
        Gets all registered tokens and basic information about them in the dataStorageSystem.
        For more detailed information, '/tokens/{tokenId}' endpoint is prepared.
      tags: ["user initiated"]
      responses:
        200:
          description: "Returns all tokens or empty array if no tokens are registered"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: array
                    items:
                      $ref: '#/components/schemas/Token'
  
  
  /tokens/{tokenId}:
    parameters:
      - $ref: '#/components/parameters/tokenId'
    get:
      summary: Gets detailed token information
      description: >-
        Returns detailed information about a token including the name and description of the app using it and what permissions the token has
      tags: ["user initiated"]
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
  

  /permissions/waitingApprovals/{permissionRequestId}/:
    parameters:
      - $ref: '#/components/parameters/permissionRequestId'
    post:
      summary: Accepts / refuses permission request
      description: >-
        Used for accepting permission requests for certain event types by applications
      tags: ["user initiated"]
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  acceptPermissionRequest:
                    type: boolean
                    default: true
      responses:
        200:
          description: Operation was successful


  /permissions/approved/{permissionRequestId}/:
    parameters:
      - $ref: '#/components/parameters/permissionRequestId'
    delete:
      summary: Allows to revoke already accepted permissions.
      description: >-
        Used for revoking certain permissions to certain apps which user no longer wants
      tags: ["user initiated"]
      responses:
        200:
          description: Operation was successful
        400:
          description: permissionRequestId does not exist | permission for permissionRequestId already revoked
        500:
          description: Something went wrong internally
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /events/eventTypes:
    get:
      summary: Gets all event types registered in the dataStorageSystem
      description: >-
        Returns all event types including information about who created them (tokenId, appName, appDescription).
        Apps can use this endpoint for requesting permissions which they don't own.
      tags: ["user initiated"]
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventTypes:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventTypeInformation'

  /events/statistics:
    get:
      summary: Gets all event types and statistics about them
      description: >-
        Parameters such as number of created events or amount of storage taken by those events is fetched among other things.
      tags: ["user initiated"]
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventTypesStatistics:
                    type: array
                    items:
                      properties:
                        eventType:
                          $ref: '#/components/schemas/EventTypeInformation'
                        numberOfCreatedEvents:
                          type: integer
                        numberOfCreatedEventsInTheLast7Days:
                          type: integer
                        numberOfCreatedEventsInTheLast14Days:
                          type: integer
                        amountOfStorageTakenByCreatedEvents:
                          type: integer

# ------------ PATHS - APP INITIATED ------------------------------------------

  /app/tokens/{tokenId}/information:
    parameters:
      - $ref: '#/components/parameters/tokenId'
    post:
      summary: "Allows app to associate itself with given token"
      description: "App can submit basic information about itself such as its id, name and description"
      tags: ["app initiated"]
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  app:
                    $ref: '#/components/schemas/App'
      responses:
        200:
          description: "Successfully updated token"
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /app/{tokenId}/eventTypes:
    parameters:
      - $ref: '#/components/parameters/tokenId'
    post:
      summary: "Asks dataStorageSystem to create new event type"
      description: "After creating new event, the app associated with the given 'tokenId' has specified permissions for the new event type"
      tags: ["app initiated"]
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  eventTypeName:
                    type: string
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionOperation'
                  isTemporaryAccess:
                    type: boolean
                    description: "Whether this permission is temporary only ( if so, expirationTimestamp is set )"
                  expirationTimestamp:
                    type: integer
                    description: "Timestamp when this permission expires"
      responses:
        201:
          description: "New event type created"
          content:
            application/json:
              schema:
                properties:
                  permissionRequestId:
                    type: string
                  permissionGranted:
                    type: boolean
                    default: true
                  waitingForUserApproval:
                    type: boolean
                    default: false
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List all event types which are belonging to this tokenId
      description: ""
      tags: ["app initiated"]
      responses:
        200:
          description: A list of event types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTypeInformation'
  
  /app/{tokenId}/eventTypes/{eventTypeId}:
    parameters:
      - $ref: '#/components/parameters/tokenId'
      - $ref: '#/components/parameters/eventTypeId'
    delete:
      summary: Deletes this eventType from dataStorageSystem with all generated events
      description: >-
        All deleted events along with the event type is deleted. 
        Subsequently all permissions to this event type previously given to other tokens are revoked
      tags: ["app initiated"]
      responses:
        200:
          description: Deletion successful
        401:
          description: Unauthorised access to this event type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Something went wrong internally
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  

  /app/tokens/{tokenId}/permissions:
    parameters:
      - $ref: '#/components/parameters/tokenId'
    post:
      summary: "Asks dataStorageSystem for permissions which were not created by token"
      description: "Apps can ask dataStorageSystem for permissions by requesting it here. Permission requests need to be accepted in the dataStorageSystem by manual accepting of a user"
      tags: ["app initiated"]
      requestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  eventTypeId:
                    type: string
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionOperation'
                  isTemporaryAccess:
                    type: boolean
                    default: false
                    description: "Whether this permission is temporary only ( if so, expirationTimestamp is set )"
                  expirationTimestamp:
                    type: integer
                    description: "Timestamp when this permission expires"
      responses:
        200:
          description: "Permissions requested and waiting for user approval"
          content:
            application/json:
              schema:
                properties:
                  permissionRequestId:
                      type: string
                  permissionGranted:
                    type: boolean
                    default: false
                  waitingForUserApproval:
                    type: boolean
                    default: true
    get:
      summary: "Gets all permissions for this token (including pending / approved)"
      description: "All current permissions are returned as stated in summary. Also created events after approval are just ordinary permissions and therefore appear here."
      tags: ["app initiated"]
      responses:
        200:
          description: "Fetched permissions"
          content:
            application/json:
              schema:
                properties:
                  permissions: 
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'


# ------------ PATHS - APP INITIATED, DATA SUBMISSION RELATED -----------------

  /tokens/{tokenId}/events:
    parameters:
      - $ref: '#/components/parameters/tokenId'
      - $ref: '#/components/parameters/eventTypeId'
    post:
      summary: "Used for uploading event or a bulk of events"
      description: ""
      tags: ["event submission and fetching related"]
      requestBody:
        content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event_Pushing_Version'
      responses:
        201:
          description: Event created
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Retrieve Events
      description: ->
        Retrieve events based on specified criteria such as time frame (only time frame at the moment).
      tags: ["event submission and fetching related"]
      parameters:
        - name: eventTypeId
          in: query
          description: Type of the event
          required: false
          schema:
            type: string
        - name: startTimestamp
          in: query
          description: Start timestamp (in milliseconds) from which to get all events
          required: false
          schema:
            type: integer
            format: int64
        - name: endTimestamp
          in: query
          description: End timestamp (in milliseconds) till which to get all events
          required: false
          schema:
            type: integer
            format: int64
        - name: numberOfEventsToFetch
          in: query
          schema:
            type: integer
            default: 20
          description: Used for pagination and sets how many events to return in one request
        - name: lastEventId
          in: query
          schema:
            type: string
            default: null
          description: Null if first n events is to be fetched
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tokens/{tokenId}/events/{eventTypeId}:
    parameters:
      - $ref: '#/components/parameters/tokenId'
      - $ref: '#/components/parameters/eventTypeId'
    get:
      summary: "Fetches events of given eventTypeId"
      description: "All events will be returned with pagination"
      tags: ["event submission and fetching related"]
      requestBody:
        content:
            application/json:
              schema:
                properties:
                  numberOfEventsToFetch:
                    type: integer
                    default: 20
                  lastEventId:
                    type: string
                    default: null
                    description: "Null if first n events is to be fetched"
      responses:
        200:
          description: Fetched events
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  lastEventId:
                    type: string
                  moreEvents:
                    type: boolean
                    default: true
                    description: "Whether more events are available to be fetched"
        401:
          description: Unauthorised access to this event type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /tokens/{tokenId}/events/{eventId}:
    parameters:
      - $ref: '#/components/parameters/tokenId'
      - $ref: '#/components/parameters/eventId'
    get:
      summary: Fetches specific event
      description: ""
      tags: ["event submission and fetching related"]
      responses:
        200:
          description: Event fetched
          content:
            application/json:
              schema:
                properties:
                  event:
                      $ref: '#/components/schemas/Event'
        401:
          description: Unauthorised access to this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Updates specific event
      description: ""
      tags: ["event submission and fetching related"]
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event_Updating_Version'
                 
      responses:
        200:
          description: Event updated
        400:
          description: Invalid request. Something is wrong there.
        401:
          description: Unauthorised access to this event type
    delete:
      summary: "Deletes specific event"
      description: ""
      tags: ["event submission and fetching related"]
      responses:
        200:
          description: Event deleted
        401:
          description: Unauthorised access to this event type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Event Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /events/bulk-delete:
    delete:
      summary: Bulk Delete Events
      description: |
        Delete multiple events based on specified criteria such as event type or time frame.
      tags: ["event submission and fetching related"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                eventIds:
                  type: array
                  items:
                    type: string
                eventTypeId:
                  type: string
                startTimestamp:
                  type: integer
                  format: int64
                endTimestamp:
                  type: integer
                  format: int64
      responses:
        200:
          description: Successful operation
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# ------------ PATHS - Registration -------------
  /users/register:
    post:
      summary: Register a new user
      description: ->
        Allows a new user to register in the dataStorageSystem
      tags: ["authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  

  /users/login:
    post:
      summary: Login
      description: |
        Allows a user to login to the system.
      tags: ["authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# ------------ PATHS - Data View Transformation Templates Related -------------
#TODO

# ------------ PATHS - Cloud Sharing Related ----------------------------------
# TODO